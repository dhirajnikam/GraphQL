import { DirectiveNode, NamedTypeNode } from "graphql";
import type { Auth, ConnectionField, Context, CustomEnumField, CustomScalarField, CypherField, FullText, ComputedField, InterfaceField, ObjectField, PointField, PrimitiveField, RelationField, TemporalField, UnionField } from "../types";
import Exclude from "./Exclude";
import { GraphElement, GraphElementConstructor } from "./GraphElement";
import { NodeDirective } from "./NodeDirective";
import { QueryOptionsDirective } from "./QueryOptionsDirective";
export interface NodeConstructor extends GraphElementConstructor {
    name: string;
    relationFields: RelationField[];
    connectionFields: ConnectionField[];
    cypherFields: CypherField[];
    primitiveFields: PrimitiveField[];
    scalarFields: CustomScalarField[];
    enumFields: CustomEnumField[];
    otherDirectives: DirectiveNode[];
    unionFields: UnionField[];
    interfaceFields: InterfaceField[];
    interfaces: NamedTypeNode[];
    objectFields: ObjectField[];
    temporalFields: TemporalField[];
    pointFields: PointField[];
    computedFields: ComputedField[];
    auth?: Auth;
    fulltextDirective?: FullText;
    exclude?: Exclude;
    nodeDirective?: NodeDirective;
    description?: string;
    queryOptionsDirective?: QueryOptionsDirective;
}
declare type MutableField = PrimitiveField | CustomScalarField | CustomEnumField | UnionField | ObjectField | TemporalField | PointField | CypherField;
declare type AuthableField = PrimitiveField | CustomScalarField | CustomEnumField | UnionField | ObjectField | TemporalField | PointField | CypherField;
declare type ConstrainableField = PrimitiveField | TemporalField | PointField;
declare class Node extends GraphElement {
    relationFields: RelationField[];
    connectionFields: ConnectionField[];
    cypherFields: CypherField[];
    otherDirectives: DirectiveNode[];
    unionFields: UnionField[];
    interfaceFields: InterfaceField[];
    interfaces: NamedTypeNode[];
    objectFields: ObjectField[];
    exclude?: Exclude;
    nodeDirective?: NodeDirective;
    fulltextDirective?: FullText;
    auth?: Auth;
    description?: string;
    queryOptions?: QueryOptionsDirective;
    constructor(input: NodeConstructor);
    get mutableFields(): MutableField[];
    /** Fields you can apply auth allow and bind to */
    get authableFields(): AuthableField[];
    get constrainableFields(): ConstrainableField[];
    get uniqueFields(): ConstrainableField[];
    get plural(): string;
    getLabelString(context: Context): string;
    getLabels(context: Context): string[];
    getMainLabel(): string;
}
export default Node;
//# sourceMappingURL=Node.d.ts.map